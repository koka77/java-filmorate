drop table if exists FILMS_GENRES;

drop table if exists FRIENDS;

drop table if exists GENRES;

drop table if exists LIKES;

drop table if exists REVIEWS_LIKES;

drop table if exists REVIEWS;

drop table if exists FILMS;

drop table if exists MPAA;

drop table if exists USERS;

-- создание таблиц
create table IF NOT EXISTS mpaa
(
    mpaa_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name    VARCHAR
);
create unique index IF NOT EXISTS MPA_MPA_ID_UINDEX
    on mpaa (mpaa_id);

create table IF NOT EXISTS films
(
    film_id      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name         VARCHAR(255),
    description  VARCHAR(255),
    release_date Date,
    duration     VARCHAR(10),
    mpaa_id      int,
    CONSTRAINT fk_mpaa FOREIGN KEY (MPAA_id) REFERENCES MPAA (MPAA_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

create unique index IF NOT EXISTS FILMS_FILM_ID_UINDEX
    on films (film_id);


create table IF NOT EXISTS users
(
    user_id  BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email    VARCHAR(30) NOT NULL,
    login    VARCHAR(30) NOT NULL,
    name     VARCHAR(30),
    birthday DATE
);
create unique index IF NOT EXISTS USERS_USER_ID_UINDEX
    on users (user_id);

create table IF NOT EXISTS likes
(
    user_id BIGINT,
    film_id BIGINT,
    CONSTRAINT LIKES_PK PRIMARY KEY (user_id, film_id),
    CONSTRAINT fk_films FOREIGN KEY (film_id) REFERENCES films (film_id),
    CONSTRAINT fk_users FOREIGN KEY (user_id) REFERENCES users (user_id)

);

create table IF NOT EXISTS genres
(
    genre_id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    name     VARCHAR(50)                          NOT NULL
);

create unique index IF NOT EXISTS GENRE_GENRE_ID_UINDEX
    on genres (genre_id);

CREATE TABLE IF NOT EXISTS films_genres
(
    film_id  BIGINT NOT NULL,
    genre_id INT    NOT NULL,
    CONSTRAINT FILMS_GENRES_PK PRIMARY KEY (film_id, genre_id),
    CONSTRAINT FILMS_GENRES_FK_1 FOREIGN KEY (film_id) REFERENCES films (film_id),
    CONSTRAINT FILMS_GENRES_FK_2 FOREIGN KEY (genre_id) REFERENCES genres (genre_id)
);

create table IF NOT EXISTS friends
(
    friend_id BIGINT NOT NULL,
    user_id   BIGINT NOT NULL,
    CONSTRAINT pk_friends PRIMARY KEY (user_id, friend_id),
    CONSTRAINT fk_friends1 FOREIGN KEY (user_id) REFERENCES users (user_id),
    CONSTRAINT fk_friends2 FOREIGN KEY (friend_id) REFERENCES users (user_id)
);

CREATE TABLE IF NOT EXISTS reviews
(
    review_id   BIGINT auto_increment,
    film_id     BIGINT,
    user_id     BIGINT,
    content     VARCHAR(256) NOT NULL,
    is_positive BOOLEAN      NOT NULL, -- false: негативный, true: положительный
    useful      INTEGER      NOT NULL DEFAULT 0,
    constraint review_PK primary key (review_id),
    CONSTRAINT fk_reviews_user_id FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE,
    CONSTRAINT fk_reviews_film_id  FOREIGN KEY (film_id) REFERENCES films (film_id) ON DELETE CASCADE
);

create unique index IF NOT EXISTS reviews_reviews_ID_UINDEX
    on reviews (review_id);

create table IF NOT EXISTS reviews_likes
(
    review_id   BIGINT,
    user_id     BIGINT,
    is_like     BOOLEAN NOT NULL, -- false: дизлайк, true: лайк
    CONSTRAINT pk_reviews_like PRIMARY KEY (review_id, user_id),
    CONSTRAINT fk_reviews_like_reviews_id FOREIGN KEY (review_id) REFERENCES reviews (review_id) ON DELETE CASCADE,
    CONSTRAINT fk_reviews_like_user_id FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE

);




